import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useQuery, useMutation } from '../convex/_generated/react'
import { useCallback, useEffect, useState } from 'react';
import CodeMirror from '@uiw/react-codemirror';
import { javascript } from '@codemirror/lang-javascript';
import { ViewUpdate } from '@codemirror/view';
import { Text, EditorSelection, Transaction } from '@codemirror/state';
import { INITIAL_CODE, mergeChange } from '../merge'

const Home: NextPage = () => {
  const code = useQuery('getCode') ?? INITIAL_CODE;
  const revision = useQuery('getRevision') ?? 0;
  const cursorKey = 'lee';
  const cursor = useQuery('getCursor', cursorKey) ?? 0;
  const typeCode = useMutation('typeCode').withOptimisticUpdate(
    (localStore, fromA, toA, fromB, toB, inserted) => {
      let localCode = localStore.getQuery('getCode', []) ?? INITIAL_CODE;
      let newCode = mergeChange(localCode, fromA, toA, fromB, toB, inserted);
      localStore.setQuery('getCode', [], newCode);
    });
  const textToString = (t: Text): string => {
    let lines = [];
    for (let line of t) {
      lines.push(line);
    }
    return lines.join('');
  };
  const onChange = (value: string, viewUpdate: ViewUpdate) => {
    if (value === code) {
      // new text is the same as what the server thinks it should be.
      // skip sending mutations to avoid feedback loops.
      return;
    }
    viewUpdate.changes.iterChanges((fromA, toA, fromB, toB, inserted) => {
      typeCode(fromA, toA, fromB, toB, textToString(inserted), revision);
    });
  };
  const onUpdate = (viewUpdate: ViewUpdate) => {
    const state = viewUpdate.state;
    const selection = state.selection.main;
    if (cursor !== selection.from) {
      console.log(`setting cursor to ${selection.from} - ${selection.to}`);
      // HACK: when the `value` changes due to a server-side change,
      // cursor gets set back to 0. So we put it back where it was.
      if (selection.from === 0 && selection.to === 0) {
        viewUpdate.view.dispatch({selection: EditorSelection.single(cursor, cursor)});
      } else {
        setCursor(selection.from);
      }
    }
  };
  useEffect(() => {

  }, [cursor])

  return (
    <div className={styles.container}>
      <Head>
        <title>Next.js with Convex</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <p>Magic Code Editor</p>
        <CodeMirror
          value={code}
          height="200px"
          width="400px"
          extensions={[javascript({ jsx: true })]}
          onChange={onChange}
          onUpdate={onUpdate}
        />
      </main>

      <footer className={styles.footer}>
        <a
          href="https://www.convex.dev/"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/convex.svg" alt="Convex Logo" width={90} height={18} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
